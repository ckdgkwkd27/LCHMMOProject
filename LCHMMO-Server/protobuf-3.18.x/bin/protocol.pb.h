// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[20]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocol_2eproto;
namespace protocol {
class NotifyDespawn;
struct NotifyDespawnDefaultTypeInternal;
extern NotifyDespawnDefaultTypeInternal _NotifyDespawn_default_instance_;
class NotifyDie;
struct NotifyDieDefaultTypeInternal;
extern NotifyDieDefaultTypeInternal _NotifyDie_default_instance_;
class NotifySetHp;
struct NotifySetHpDefaultTypeInternal;
extern NotifySetHpDefaultTypeInternal _NotifySetHp_default_instance_;
class NotifySpawn;
struct NotifySpawnDefaultTypeInternal;
extern NotifySpawnDefaultTypeInternal _NotifySpawn_default_instance_;
class ObjectInfo;
struct ObjectInfoDefaultTypeInternal;
extern ObjectInfoDefaultTypeInternal _ObjectInfo_default_instance_;
class PositionInfo;
struct PositionInfoDefaultTypeInternal;
extern PositionInfoDefaultTypeInternal _PositionInfo_default_instance_;
class RequestEnterGame;
struct RequestEnterGameDefaultTypeInternal;
extern RequestEnterGameDefaultTypeInternal _RequestEnterGame_default_instance_;
class RequestJoin;
struct RequestJoinDefaultTypeInternal;
extern RequestJoinDefaultTypeInternal _RequestJoin_default_instance_;
class RequestLogin;
struct RequestLoginDefaultTypeInternal;
extern RequestLoginDefaultTypeInternal _RequestLogin_default_instance_;
class RequestMove;
struct RequestMoveDefaultTypeInternal;
extern RequestMoveDefaultTypeInternal _RequestMove_default_instance_;
class RequestSkill;
struct RequestSkillDefaultTypeInternal;
extern RequestSkillDefaultTypeInternal _RequestSkill_default_instance_;
class RequestTeleport;
struct RequestTeleportDefaultTypeInternal;
extern RequestTeleportDefaultTypeInternal _RequestTeleport_default_instance_;
class RequestViewportUpdate;
struct RequestViewportUpdateDefaultTypeInternal;
extern RequestViewportUpdateDefaultTypeInternal _RequestViewportUpdate_default_instance_;
class ReturnEnterGame;
struct ReturnEnterGameDefaultTypeInternal;
extern ReturnEnterGameDefaultTypeInternal _ReturnEnterGame_default_instance_;
class ReturnJoin;
struct ReturnJoinDefaultTypeInternal;
extern ReturnJoinDefaultTypeInternal _ReturnJoin_default_instance_;
class ReturnLogin;
struct ReturnLoginDefaultTypeInternal;
extern ReturnLoginDefaultTypeInternal _ReturnLogin_default_instance_;
class ReturnMove;
struct ReturnMoveDefaultTypeInternal;
extern ReturnMoveDefaultTypeInternal _ReturnMove_default_instance_;
class ReturnSkill;
struct ReturnSkillDefaultTypeInternal;
extern ReturnSkillDefaultTypeInternal _ReturnSkill_default_instance_;
class ReturnTeleport;
struct ReturnTeleportDefaultTypeInternal;
extern ReturnTeleportDefaultTypeInternal _ReturnTeleport_default_instance_;
class StatInfo;
struct StatInfoDefaultTypeInternal;
extern StatInfoDefaultTypeInternal _StatInfo_default_instance_;
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::NotifyDespawn* Arena::CreateMaybeMessage<::protocol::NotifyDespawn>(Arena*);
template<> ::protocol::NotifyDie* Arena::CreateMaybeMessage<::protocol::NotifyDie>(Arena*);
template<> ::protocol::NotifySetHp* Arena::CreateMaybeMessage<::protocol::NotifySetHp>(Arena*);
template<> ::protocol::NotifySpawn* Arena::CreateMaybeMessage<::protocol::NotifySpawn>(Arena*);
template<> ::protocol::ObjectInfo* Arena::CreateMaybeMessage<::protocol::ObjectInfo>(Arena*);
template<> ::protocol::PositionInfo* Arena::CreateMaybeMessage<::protocol::PositionInfo>(Arena*);
template<> ::protocol::RequestEnterGame* Arena::CreateMaybeMessage<::protocol::RequestEnterGame>(Arena*);
template<> ::protocol::RequestJoin* Arena::CreateMaybeMessage<::protocol::RequestJoin>(Arena*);
template<> ::protocol::RequestLogin* Arena::CreateMaybeMessage<::protocol::RequestLogin>(Arena*);
template<> ::protocol::RequestMove* Arena::CreateMaybeMessage<::protocol::RequestMove>(Arena*);
template<> ::protocol::RequestSkill* Arena::CreateMaybeMessage<::protocol::RequestSkill>(Arena*);
template<> ::protocol::RequestTeleport* Arena::CreateMaybeMessage<::protocol::RequestTeleport>(Arena*);
template<> ::protocol::RequestViewportUpdate* Arena::CreateMaybeMessage<::protocol::RequestViewportUpdate>(Arena*);
template<> ::protocol::ReturnEnterGame* Arena::CreateMaybeMessage<::protocol::ReturnEnterGame>(Arena*);
template<> ::protocol::ReturnJoin* Arena::CreateMaybeMessage<::protocol::ReturnJoin>(Arena*);
template<> ::protocol::ReturnLogin* Arena::CreateMaybeMessage<::protocol::ReturnLogin>(Arena*);
template<> ::protocol::ReturnMove* Arena::CreateMaybeMessage<::protocol::ReturnMove>(Arena*);
template<> ::protocol::ReturnSkill* Arena::CreateMaybeMessage<::protocol::ReturnSkill>(Arena*);
template<> ::protocol::ReturnTeleport* Arena::CreateMaybeMessage<::protocol::ReturnTeleport>(Arena*);
template<> ::protocol::StatInfo* Arena::CreateMaybeMessage<::protocol::StatInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {

// ===================================================================

class ObjectInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.ObjectInfo) */ {
 public:
  inline ObjectInfo() : ObjectInfo(nullptr) {}
  ~ObjectInfo() override;
  explicit constexpr ObjectInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectInfo(const ObjectInfo& from);
  ObjectInfo(ObjectInfo&& from) noexcept
    : ObjectInfo() {
    *this = ::std::move(from);
  }

  inline ObjectInfo& operator=(const ObjectInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectInfo& operator=(ObjectInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectInfo* internal_default_instance() {
    return reinterpret_cast<const ObjectInfo*>(
               &_ObjectInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ObjectInfo& a, ObjectInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectInfo* New() const final {
    return new ObjectInfo();
  }

  ObjectInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ObjectInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.ObjectInfo";
  }
  protected:
  explicit ObjectInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kPosInfoFieldNumber = 4,
    kStatInfoFieldNumber = 5,
    kObjectTypeFieldNumber = 1,
    kActorIdFieldNumber = 2,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .protocol.PositionInfo posInfo = 4;
  bool has_posinfo() const;
  private:
  bool _internal_has_posinfo() const;
  public:
  void clear_posinfo();
  const ::protocol::PositionInfo& posinfo() const;
  PROTOBUF_MUST_USE_RESULT ::protocol::PositionInfo* release_posinfo();
  ::protocol::PositionInfo* mutable_posinfo();
  void set_allocated_posinfo(::protocol::PositionInfo* posinfo);
  private:
  const ::protocol::PositionInfo& _internal_posinfo() const;
  ::protocol::PositionInfo* _internal_mutable_posinfo();
  public:
  void unsafe_arena_set_allocated_posinfo(
      ::protocol::PositionInfo* posinfo);
  ::protocol::PositionInfo* unsafe_arena_release_posinfo();

  // .protocol.StatInfo statInfo = 5;
  bool has_statinfo() const;
  private:
  bool _internal_has_statinfo() const;
  public:
  void clear_statinfo();
  const ::protocol::StatInfo& statinfo() const;
  PROTOBUF_MUST_USE_RESULT ::protocol::StatInfo* release_statinfo();
  ::protocol::StatInfo* mutable_statinfo();
  void set_allocated_statinfo(::protocol::StatInfo* statinfo);
  private:
  const ::protocol::StatInfo& _internal_statinfo() const;
  ::protocol::StatInfo* _internal_mutable_statinfo();
  public:
  void unsafe_arena_set_allocated_statinfo(
      ::protocol::StatInfo* statinfo);
  ::protocol::StatInfo* unsafe_arena_release_statinfo();

  // uint32 ObjectType = 1;
  void clear_objecttype();
  ::PROTOBUF_NAMESPACE_ID::uint32 objecttype() const;
  void set_objecttype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_objecttype() const;
  void _internal_set_objecttype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 actorId = 2;
  void clear_actorid();
  ::PROTOBUF_NAMESPACE_ID::uint32 actorid() const;
  void set_actorid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_actorid() const;
  void _internal_set_actorid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.ObjectInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::protocol::PositionInfo* posinfo_;
  ::protocol::StatInfo* statinfo_;
  ::PROTOBUF_NAMESPACE_ID::uint32 objecttype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 actorid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class PositionInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.PositionInfo) */ {
 public:
  inline PositionInfo() : PositionInfo(nullptr) {}
  ~PositionInfo() override;
  explicit constexpr PositionInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PositionInfo(const PositionInfo& from);
  PositionInfo(PositionInfo&& from) noexcept
    : PositionInfo() {
    *this = ::std::move(from);
  }

  inline PositionInfo& operator=(const PositionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionInfo& operator=(PositionInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PositionInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PositionInfo* internal_default_instance() {
    return reinterpret_cast<const PositionInfo*>(
               &_PositionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PositionInfo& a, PositionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PositionInfo* New() const final {
    return new PositionInfo();
  }

  PositionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PositionInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PositionInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PositionInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.PositionInfo";
  }
  protected:
  explicit PositionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
    kMoveDirFieldNumber = 2,
    kPosXFieldNumber = 3,
    kPosYFieldNumber = 4,
  };
  // uint32 state = 1;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::uint32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 moveDir = 2;
  void clear_movedir();
  ::PROTOBUF_NAMESPACE_ID::uint32 movedir() const;
  void set_movedir(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_movedir() const;
  void _internal_set_movedir(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 posX = 3;
  void clear_posx();
  ::PROTOBUF_NAMESPACE_ID::int32 posx() const;
  void set_posx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_posx() const;
  void _internal_set_posx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 posY = 4;
  void clear_posy();
  ::PROTOBUF_NAMESPACE_ID::int32 posy() const;
  void set_posy(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_posy() const;
  void _internal_set_posy(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.PositionInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 state_;
  ::PROTOBUF_NAMESPACE_ID::uint32 movedir_;
  ::PROTOBUF_NAMESPACE_ID::int32 posx_;
  ::PROTOBUF_NAMESPACE_ID::int32 posy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class StatInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.StatInfo) */ {
 public:
  inline StatInfo() : StatInfo(nullptr) {}
  ~StatInfo() override;
  explicit constexpr StatInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatInfo(const StatInfo& from);
  StatInfo(StatInfo&& from) noexcept
    : StatInfo() {
    *this = ::std::move(from);
  }

  inline StatInfo& operator=(const StatInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatInfo& operator=(StatInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatInfo* internal_default_instance() {
    return reinterpret_cast<const StatInfo*>(
               &_StatInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StatInfo& a, StatInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(StatInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatInfo* New() const final {
    return new StatInfo();
  }

  StatInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StatInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.StatInfo";
  }
  protected:
  explicit StatInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelFieldNumber = 1,
    kHpFieldNumber = 2,
    kMaxHpFieldNumber = 3,
    kAttackFieldNumber = 4,
    kSpeedFieldNumber = 5,
    kTotalExpFieldNumber = 6,
  };
  // uint32 level = 1;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 hp = 2;
  void clear_hp();
  ::PROTOBUF_NAMESPACE_ID::uint32 hp() const;
  void set_hp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hp() const;
  void _internal_set_hp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 maxHp = 3;
  void clear_maxhp();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxhp() const;
  void set_maxhp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxhp() const;
  void _internal_set_maxhp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 attack = 4;
  void clear_attack();
  ::PROTOBUF_NAMESPACE_ID::int32 attack() const;
  void set_attack(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_attack() const;
  void _internal_set_attack(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float speed = 5;
  void clear_speed();
  float speed() const;
  void set_speed(float value);
  private:
  float _internal_speed() const;
  void _internal_set_speed(float value);
  public:

  // uint32 totalExp = 6;
  void clear_totalexp();
  ::PROTOBUF_NAMESPACE_ID::uint32 totalexp() const;
  void set_totalexp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_totalexp() const;
  void _internal_set_totalexp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.StatInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 level_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxhp_;
  ::PROTOBUF_NAMESPACE_ID::int32 attack_;
  float speed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 totalexp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class RequestJoin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.RequestJoin) */ {
 public:
  inline RequestJoin() : RequestJoin(nullptr) {}
  ~RequestJoin() override;
  explicit constexpr RequestJoin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestJoin(const RequestJoin& from);
  RequestJoin(RequestJoin&& from) noexcept
    : RequestJoin() {
    *this = ::std::move(from);
  }

  inline RequestJoin& operator=(const RequestJoin& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestJoin& operator=(RequestJoin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestJoin& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestJoin* internal_default_instance() {
    return reinterpret_cast<const RequestJoin*>(
               &_RequestJoin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RequestJoin& a, RequestJoin& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestJoin* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestJoin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestJoin* New() const final {
    return new RequestJoin();
  }

  RequestJoin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestJoin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestJoin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestJoin& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestJoin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.RequestJoin";
  }
  protected:
  explicit RequestJoin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_MUST_USE_RESULT std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:protocol.RequestJoin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class ReturnJoin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.ReturnJoin) */ {
 public:
  inline ReturnJoin() : ReturnJoin(nullptr) {}
  ~ReturnJoin() override;
  explicit constexpr ReturnJoin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReturnJoin(const ReturnJoin& from);
  ReturnJoin(ReturnJoin&& from) noexcept
    : ReturnJoin() {
    *this = ::std::move(from);
  }

  inline ReturnJoin& operator=(const ReturnJoin& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReturnJoin& operator=(ReturnJoin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReturnJoin& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReturnJoin* internal_default_instance() {
    return reinterpret_cast<const ReturnJoin*>(
               &_ReturnJoin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ReturnJoin& a, ReturnJoin& b) {
    a.Swap(&b);
  }
  inline void Swap(ReturnJoin* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReturnJoin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReturnJoin* New() const final {
    return new ReturnJoin();
  }

  ReturnJoin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReturnJoin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReturnJoin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReturnJoin& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReturnJoin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.ReturnJoin";
  }
  protected:
  explicit ReturnJoin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // uint32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::uint32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.ReturnJoin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class RequestLogin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.RequestLogin) */ {
 public:
  inline RequestLogin() : RequestLogin(nullptr) {}
  ~RequestLogin() override;
  explicit constexpr RequestLogin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestLogin(const RequestLogin& from);
  RequestLogin(RequestLogin&& from) noexcept
    : RequestLogin() {
    *this = ::std::move(from);
  }

  inline RequestLogin& operator=(const RequestLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestLogin& operator=(RequestLogin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestLogin& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestLogin* internal_default_instance() {
    return reinterpret_cast<const RequestLogin*>(
               &_RequestLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RequestLogin& a, RequestLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestLogin* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestLogin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestLogin* New() const final {
    return new RequestLogin();
  }

  RequestLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestLogin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestLogin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestLogin& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.RequestLogin";
  }
  protected:
  explicit RequestLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_MUST_USE_RESULT std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:protocol.RequestLogin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class ReturnLogin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.ReturnLogin) */ {
 public:
  inline ReturnLogin() : ReturnLogin(nullptr) {}
  ~ReturnLogin() override;
  explicit constexpr ReturnLogin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReturnLogin(const ReturnLogin& from);
  ReturnLogin(ReturnLogin&& from) noexcept
    : ReturnLogin() {
    *this = ::std::move(from);
  }

  inline ReturnLogin& operator=(const ReturnLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReturnLogin& operator=(ReturnLogin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReturnLogin& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReturnLogin* internal_default_instance() {
    return reinterpret_cast<const ReturnLogin*>(
               &_ReturnLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ReturnLogin& a, ReturnLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(ReturnLogin* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReturnLogin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReturnLogin* New() const final {
    return new ReturnLogin();
  }

  ReturnLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReturnLogin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReturnLogin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReturnLogin& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReturnLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.ReturnLogin";
  }
  protected:
  explicit ReturnLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kPlayerIdFieldNumber = 2,
  };
  // uint32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::uint32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 playerId = 2;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::uint32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.ReturnLogin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_;
  ::PROTOBUF_NAMESPACE_ID::uint32 playerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class RequestEnterGame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.RequestEnterGame) */ {
 public:
  inline RequestEnterGame() : RequestEnterGame(nullptr) {}
  ~RequestEnterGame() override;
  explicit constexpr RequestEnterGame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestEnterGame(const RequestEnterGame& from);
  RequestEnterGame(RequestEnterGame&& from) noexcept
    : RequestEnterGame() {
    *this = ::std::move(from);
  }

  inline RequestEnterGame& operator=(const RequestEnterGame& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestEnterGame& operator=(RequestEnterGame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestEnterGame& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestEnterGame* internal_default_instance() {
    return reinterpret_cast<const RequestEnterGame*>(
               &_RequestEnterGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RequestEnterGame& a, RequestEnterGame& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestEnterGame* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestEnterGame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestEnterGame* New() const final {
    return new RequestEnterGame();
  }

  RequestEnterGame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestEnterGame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestEnterGame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestEnterGame& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestEnterGame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.RequestEnterGame";
  }
  protected:
  explicit RequestEnterGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kZoneIdFieldNumber = 2,
  };
  // uint32 playerId = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::uint32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 zoneId = 2;
  void clear_zoneid();
  ::PROTOBUF_NAMESPACE_ID::uint32 zoneid() const;
  void set_zoneid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_zoneid() const;
  void _internal_set_zoneid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.RequestEnterGame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 playerid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 zoneid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class ReturnEnterGame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.ReturnEnterGame) */ {
 public:
  inline ReturnEnterGame() : ReturnEnterGame(nullptr) {}
  ~ReturnEnterGame() override;
  explicit constexpr ReturnEnterGame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReturnEnterGame(const ReturnEnterGame& from);
  ReturnEnterGame(ReturnEnterGame&& from) noexcept
    : ReturnEnterGame() {
    *this = ::std::move(from);
  }

  inline ReturnEnterGame& operator=(const ReturnEnterGame& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReturnEnterGame& operator=(ReturnEnterGame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReturnEnterGame& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReturnEnterGame* internal_default_instance() {
    return reinterpret_cast<const ReturnEnterGame*>(
               &_ReturnEnterGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ReturnEnterGame& a, ReturnEnterGame& b) {
    a.Swap(&b);
  }
  inline void Swap(ReturnEnterGame* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReturnEnterGame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReturnEnterGame* New() const final {
    return new ReturnEnterGame();
  }

  ReturnEnterGame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReturnEnterGame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReturnEnterGame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReturnEnterGame& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReturnEnterGame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.ReturnEnterGame";
  }
  protected:
  explicit ReturnEnterGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMyPlayerFieldNumber = 1,
    kZoneIdFieldNumber = 2,
  };
  // .protocol.ObjectInfo myPlayer = 1;
  bool has_myplayer() const;
  private:
  bool _internal_has_myplayer() const;
  public:
  void clear_myplayer();
  const ::protocol::ObjectInfo& myplayer() const;
  PROTOBUF_MUST_USE_RESULT ::protocol::ObjectInfo* release_myplayer();
  ::protocol::ObjectInfo* mutable_myplayer();
  void set_allocated_myplayer(::protocol::ObjectInfo* myplayer);
  private:
  const ::protocol::ObjectInfo& _internal_myplayer() const;
  ::protocol::ObjectInfo* _internal_mutable_myplayer();
  public:
  void unsafe_arena_set_allocated_myplayer(
      ::protocol::ObjectInfo* myplayer);
  ::protocol::ObjectInfo* unsafe_arena_release_myplayer();

  // uint32 zoneId = 2;
  void clear_zoneid();
  ::PROTOBUF_NAMESPACE_ID::uint32 zoneid() const;
  void set_zoneid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_zoneid() const;
  void _internal_set_zoneid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.ReturnEnterGame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protocol::ObjectInfo* myplayer_;
  ::PROTOBUF_NAMESPACE_ID::uint32 zoneid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class NotifySpawn final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.NotifySpawn) */ {
 public:
  inline NotifySpawn() : NotifySpawn(nullptr) {}
  ~NotifySpawn() override;
  explicit constexpr NotifySpawn(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotifySpawn(const NotifySpawn& from);
  NotifySpawn(NotifySpawn&& from) noexcept
    : NotifySpawn() {
    *this = ::std::move(from);
  }

  inline NotifySpawn& operator=(const NotifySpawn& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotifySpawn& operator=(NotifySpawn&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotifySpawn& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotifySpawn* internal_default_instance() {
    return reinterpret_cast<const NotifySpawn*>(
               &_NotifySpawn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(NotifySpawn& a, NotifySpawn& b) {
    a.Swap(&b);
  }
  inline void Swap(NotifySpawn* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotifySpawn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NotifySpawn* New() const final {
    return new NotifySpawn();
  }

  NotifySpawn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NotifySpawn>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NotifySpawn& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NotifySpawn& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifySpawn* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.NotifySpawn";
  }
  protected:
  explicit NotifySpawn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectsFieldNumber = 1,
  };
  // repeated .protocol.ObjectInfo objects = 1;
  int objects_size() const;
  private:
  int _internal_objects_size() const;
  public:
  void clear_objects();
  ::protocol::ObjectInfo* mutable_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::ObjectInfo >*
      mutable_objects();
  private:
  const ::protocol::ObjectInfo& _internal_objects(int index) const;
  ::protocol::ObjectInfo* _internal_add_objects();
  public:
  const ::protocol::ObjectInfo& objects(int index) const;
  ::protocol::ObjectInfo* add_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::ObjectInfo >&
      objects() const;

  // @@protoc_insertion_point(class_scope:protocol.NotifySpawn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::ObjectInfo > objects_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class RequestMove final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.RequestMove) */ {
 public:
  inline RequestMove() : RequestMove(nullptr) {}
  ~RequestMove() override;
  explicit constexpr RequestMove(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestMove(const RequestMove& from);
  RequestMove(RequestMove&& from) noexcept
    : RequestMove() {
    *this = ::std::move(from);
  }

  inline RequestMove& operator=(const RequestMove& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestMove& operator=(RequestMove&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestMove& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestMove* internal_default_instance() {
    return reinterpret_cast<const RequestMove*>(
               &_RequestMove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RequestMove& a, RequestMove& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestMove* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestMove* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestMove* New() const final {
    return new RequestMove();
  }

  RequestMove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestMove>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestMove& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestMove& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestMove* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.RequestMove";
  }
  protected:
  explicit RequestMove(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosInfoFieldNumber = 1,
  };
  // .protocol.PositionInfo posInfo = 1;
  bool has_posinfo() const;
  private:
  bool _internal_has_posinfo() const;
  public:
  void clear_posinfo();
  const ::protocol::PositionInfo& posinfo() const;
  PROTOBUF_MUST_USE_RESULT ::protocol::PositionInfo* release_posinfo();
  ::protocol::PositionInfo* mutable_posinfo();
  void set_allocated_posinfo(::protocol::PositionInfo* posinfo);
  private:
  const ::protocol::PositionInfo& _internal_posinfo() const;
  ::protocol::PositionInfo* _internal_mutable_posinfo();
  public:
  void unsafe_arena_set_allocated_posinfo(
      ::protocol::PositionInfo* posinfo);
  ::protocol::PositionInfo* unsafe_arena_release_posinfo();

  // @@protoc_insertion_point(class_scope:protocol.RequestMove)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protocol::PositionInfo* posinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class ReturnMove final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.ReturnMove) */ {
 public:
  inline ReturnMove() : ReturnMove(nullptr) {}
  ~ReturnMove() override;
  explicit constexpr ReturnMove(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReturnMove(const ReturnMove& from);
  ReturnMove(ReturnMove&& from) noexcept
    : ReturnMove() {
    *this = ::std::move(from);
  }

  inline ReturnMove& operator=(const ReturnMove& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReturnMove& operator=(ReturnMove&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReturnMove& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReturnMove* internal_default_instance() {
    return reinterpret_cast<const ReturnMove*>(
               &_ReturnMove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ReturnMove& a, ReturnMove& b) {
    a.Swap(&b);
  }
  inline void Swap(ReturnMove* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReturnMove* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReturnMove* New() const final {
    return new ReturnMove();
  }

  ReturnMove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReturnMove>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReturnMove& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReturnMove& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReturnMove* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.ReturnMove";
  }
  protected:
  explicit ReturnMove(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosInfoFieldNumber = 2,
    kActorIdFieldNumber = 1,
  };
  // .protocol.PositionInfo posInfo = 2;
  bool has_posinfo() const;
  private:
  bool _internal_has_posinfo() const;
  public:
  void clear_posinfo();
  const ::protocol::PositionInfo& posinfo() const;
  PROTOBUF_MUST_USE_RESULT ::protocol::PositionInfo* release_posinfo();
  ::protocol::PositionInfo* mutable_posinfo();
  void set_allocated_posinfo(::protocol::PositionInfo* posinfo);
  private:
  const ::protocol::PositionInfo& _internal_posinfo() const;
  ::protocol::PositionInfo* _internal_mutable_posinfo();
  public:
  void unsafe_arena_set_allocated_posinfo(
      ::protocol::PositionInfo* posinfo);
  ::protocol::PositionInfo* unsafe_arena_release_posinfo();

  // uint32 actorId = 1;
  void clear_actorid();
  ::PROTOBUF_NAMESPACE_ID::uint32 actorid() const;
  void set_actorid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_actorid() const;
  void _internal_set_actorid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.ReturnMove)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protocol::PositionInfo* posinfo_;
  ::PROTOBUF_NAMESPACE_ID::uint32 actorid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class NotifySetHp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.NotifySetHp) */ {
 public:
  inline NotifySetHp() : NotifySetHp(nullptr) {}
  ~NotifySetHp() override;
  explicit constexpr NotifySetHp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotifySetHp(const NotifySetHp& from);
  NotifySetHp(NotifySetHp&& from) noexcept
    : NotifySetHp() {
    *this = ::std::move(from);
  }

  inline NotifySetHp& operator=(const NotifySetHp& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotifySetHp& operator=(NotifySetHp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotifySetHp& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotifySetHp* internal_default_instance() {
    return reinterpret_cast<const NotifySetHp*>(
               &_NotifySetHp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(NotifySetHp& a, NotifySetHp& b) {
    a.Swap(&b);
  }
  inline void Swap(NotifySetHp* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotifySetHp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NotifySetHp* New() const final {
    return new NotifySetHp();
  }

  NotifySetHp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NotifySetHp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NotifySetHp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NotifySetHp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifySetHp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.NotifySetHp";
  }
  protected:
  explicit NotifySetHp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorIdFieldNumber = 1,
    kHpFieldNumber = 2,
  };
  // uint32 actorId = 1;
  void clear_actorid();
  ::PROTOBUF_NAMESPACE_ID::uint32 actorid() const;
  void set_actorid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_actorid() const;
  void _internal_set_actorid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 hp = 2;
  void clear_hp();
  ::PROTOBUF_NAMESPACE_ID::uint32 hp() const;
  void set_hp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hp() const;
  void _internal_set_hp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.NotifySetHp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 actorid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class RequestSkill final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.RequestSkill) */ {
 public:
  inline RequestSkill() : RequestSkill(nullptr) {}
  ~RequestSkill() override;
  explicit constexpr RequestSkill(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestSkill(const RequestSkill& from);
  RequestSkill(RequestSkill&& from) noexcept
    : RequestSkill() {
    *this = ::std::move(from);
  }

  inline RequestSkill& operator=(const RequestSkill& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestSkill& operator=(RequestSkill&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestSkill& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestSkill* internal_default_instance() {
    return reinterpret_cast<const RequestSkill*>(
               &_RequestSkill_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(RequestSkill& a, RequestSkill& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestSkill* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestSkill* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestSkill* New() const final {
    return new RequestSkill();
  }

  RequestSkill* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestSkill>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestSkill& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestSkill& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestSkill* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.RequestSkill";
  }
  protected:
  explicit RequestSkill(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkillIdFieldNumber = 1,
    kTargetActorIdFieldNumber = 2,
  };
  // uint32 skillId = 1;
  void clear_skillid();
  ::PROTOBUF_NAMESPACE_ID::uint32 skillid() const;
  void set_skillid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_skillid() const;
  void _internal_set_skillid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 targetActorId = 2;
  void clear_targetactorid();
  ::PROTOBUF_NAMESPACE_ID::uint32 targetactorid() const;
  void set_targetactorid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_targetactorid() const;
  void _internal_set_targetactorid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.RequestSkill)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 skillid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 targetactorid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class ReturnSkill final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.ReturnSkill) */ {
 public:
  inline ReturnSkill() : ReturnSkill(nullptr) {}
  ~ReturnSkill() override;
  explicit constexpr ReturnSkill(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReturnSkill(const ReturnSkill& from);
  ReturnSkill(ReturnSkill&& from) noexcept
    : ReturnSkill() {
    *this = ::std::move(from);
  }

  inline ReturnSkill& operator=(const ReturnSkill& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReturnSkill& operator=(ReturnSkill&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReturnSkill& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReturnSkill* internal_default_instance() {
    return reinterpret_cast<const ReturnSkill*>(
               &_ReturnSkill_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ReturnSkill& a, ReturnSkill& b) {
    a.Swap(&b);
  }
  inline void Swap(ReturnSkill* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReturnSkill* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReturnSkill* New() const final {
    return new ReturnSkill();
  }

  ReturnSkill* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReturnSkill>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReturnSkill& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReturnSkill& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReturnSkill* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.ReturnSkill";
  }
  protected:
  explicit ReturnSkill(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorIdFieldNumber = 1,
    kSkillIdFieldNumber = 2,
  };
  // uint32 actorId = 1;
  void clear_actorid();
  ::PROTOBUF_NAMESPACE_ID::uint32 actorid() const;
  void set_actorid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_actorid() const;
  void _internal_set_actorid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 skillId = 2;
  void clear_skillid();
  ::PROTOBUF_NAMESPACE_ID::uint32 skillid() const;
  void set_skillid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_skillid() const;
  void _internal_set_skillid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.ReturnSkill)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 actorid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 skillid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class NotifyDie final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.NotifyDie) */ {
 public:
  inline NotifyDie() : NotifyDie(nullptr) {}
  ~NotifyDie() override;
  explicit constexpr NotifyDie(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotifyDie(const NotifyDie& from);
  NotifyDie(NotifyDie&& from) noexcept
    : NotifyDie() {
    *this = ::std::move(from);
  }

  inline NotifyDie& operator=(const NotifyDie& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotifyDie& operator=(NotifyDie&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotifyDie& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotifyDie* internal_default_instance() {
    return reinterpret_cast<const NotifyDie*>(
               &_NotifyDie_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(NotifyDie& a, NotifyDie& b) {
    a.Swap(&b);
  }
  inline void Swap(NotifyDie* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotifyDie* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NotifyDie* New() const final {
    return new NotifyDie();
  }

  NotifyDie* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NotifyDie>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NotifyDie& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NotifyDie& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyDie* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.NotifyDie";
  }
  protected:
  explicit NotifyDie(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorIdFieldNumber = 1,
    kAttackerIdFieldNumber = 2,
  };
  // uint32 actorId = 1;
  void clear_actorid();
  ::PROTOBUF_NAMESPACE_ID::uint32 actorid() const;
  void set_actorid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_actorid() const;
  void _internal_set_actorid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 attackerId = 2;
  void clear_attackerid();
  ::PROTOBUF_NAMESPACE_ID::uint32 attackerid() const;
  void set_attackerid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_attackerid() const;
  void _internal_set_attackerid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.NotifyDie)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 actorid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 attackerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class NotifyDespawn final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.NotifyDespawn) */ {
 public:
  inline NotifyDespawn() : NotifyDespawn(nullptr) {}
  ~NotifyDespawn() override;
  explicit constexpr NotifyDespawn(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotifyDespawn(const NotifyDespawn& from);
  NotifyDespawn(NotifyDespawn&& from) noexcept
    : NotifyDespawn() {
    *this = ::std::move(from);
  }

  inline NotifyDespawn& operator=(const NotifyDespawn& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotifyDespawn& operator=(NotifyDespawn&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotifyDespawn& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotifyDespawn* internal_default_instance() {
    return reinterpret_cast<const NotifyDespawn*>(
               &_NotifyDespawn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(NotifyDespawn& a, NotifyDespawn& b) {
    a.Swap(&b);
  }
  inline void Swap(NotifyDespawn* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotifyDespawn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NotifyDespawn* New() const final {
    return new NotifyDespawn();
  }

  NotifyDespawn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NotifyDespawn>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NotifyDespawn& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NotifyDespawn& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyDespawn* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.NotifyDespawn";
  }
  protected:
  explicit NotifyDespawn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorIdsFieldNumber = 1,
  };
  // repeated uint32 actorIds = 1;
  int actorids_size() const;
  private:
  int _internal_actorids_size() const;
  public:
  void clear_actorids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_actorids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_actorids() const;
  void _internal_add_actorids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_actorids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 actorids(int index) const;
  void set_actorids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_actorids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      actorids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_actorids();

  // @@protoc_insertion_point(class_scope:protocol.NotifyDespawn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > actorids_;
  mutable std::atomic<int> _actorids_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class RequestTeleport final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.RequestTeleport) */ {
 public:
  inline RequestTeleport() : RequestTeleport(nullptr) {}
  ~RequestTeleport() override;
  explicit constexpr RequestTeleport(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestTeleport(const RequestTeleport& from);
  RequestTeleport(RequestTeleport&& from) noexcept
    : RequestTeleport() {
    *this = ::std::move(from);
  }

  inline RequestTeleport& operator=(const RequestTeleport& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestTeleport& operator=(RequestTeleport&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestTeleport& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestTeleport* internal_default_instance() {
    return reinterpret_cast<const RequestTeleport*>(
               &_RequestTeleport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(RequestTeleport& a, RequestTeleport& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestTeleport* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestTeleport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestTeleport* New() const final {
    return new RequestTeleport();
  }

  RequestTeleport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestTeleport>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestTeleport& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestTeleport& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestTeleport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.RequestTeleport";
  }
  protected:
  explicit RequestTeleport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosInfoFieldNumber = 3,
    kActorIdFieldNumber = 1,
    kZoneIdFieldNumber = 2,
  };
  // .protocol.PositionInfo posInfo = 3;
  bool has_posinfo() const;
  private:
  bool _internal_has_posinfo() const;
  public:
  void clear_posinfo();
  const ::protocol::PositionInfo& posinfo() const;
  PROTOBUF_MUST_USE_RESULT ::protocol::PositionInfo* release_posinfo();
  ::protocol::PositionInfo* mutable_posinfo();
  void set_allocated_posinfo(::protocol::PositionInfo* posinfo);
  private:
  const ::protocol::PositionInfo& _internal_posinfo() const;
  ::protocol::PositionInfo* _internal_mutable_posinfo();
  public:
  void unsafe_arena_set_allocated_posinfo(
      ::protocol::PositionInfo* posinfo);
  ::protocol::PositionInfo* unsafe_arena_release_posinfo();

  // uint32 actorId = 1;
  void clear_actorid();
  ::PROTOBUF_NAMESPACE_ID::uint32 actorid() const;
  void set_actorid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_actorid() const;
  void _internal_set_actorid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 zoneId = 2;
  void clear_zoneid();
  ::PROTOBUF_NAMESPACE_ID::uint32 zoneid() const;
  void set_zoneid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_zoneid() const;
  void _internal_set_zoneid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.RequestTeleport)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protocol::PositionInfo* posinfo_;
  ::PROTOBUF_NAMESPACE_ID::uint32 actorid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 zoneid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class ReturnTeleport final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.ReturnTeleport) */ {
 public:
  inline ReturnTeleport() : ReturnTeleport(nullptr) {}
  ~ReturnTeleport() override;
  explicit constexpr ReturnTeleport(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReturnTeleport(const ReturnTeleport& from);
  ReturnTeleport(ReturnTeleport&& from) noexcept
    : ReturnTeleport() {
    *this = ::std::move(from);
  }

  inline ReturnTeleport& operator=(const ReturnTeleport& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReturnTeleport& operator=(ReturnTeleport&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReturnTeleport& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReturnTeleport* internal_default_instance() {
    return reinterpret_cast<const ReturnTeleport*>(
               &_ReturnTeleport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ReturnTeleport& a, ReturnTeleport& b) {
    a.Swap(&b);
  }
  inline void Swap(ReturnTeleport* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReturnTeleport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReturnTeleport* New() const final {
    return new ReturnTeleport();
  }

  ReturnTeleport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReturnTeleport>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReturnTeleport& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReturnTeleport& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReturnTeleport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.ReturnTeleport";
  }
  protected:
  explicit ReturnTeleport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorIdFieldNumber = 1,
    kZoneIdFieldNumber = 2,
  };
  // uint32 actorId = 1;
  void clear_actorid();
  ::PROTOBUF_NAMESPACE_ID::uint32 actorid() const;
  void set_actorid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_actorid() const;
  void _internal_set_actorid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 zoneId = 2;
  void clear_zoneid();
  ::PROTOBUF_NAMESPACE_ID::uint32 zoneid() const;
  void set_zoneid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_zoneid() const;
  void _internal_set_zoneid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.ReturnTeleport)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 actorid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 zoneid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class RequestViewportUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.RequestViewportUpdate) */ {
 public:
  inline RequestViewportUpdate() : RequestViewportUpdate(nullptr) {}
  ~RequestViewportUpdate() override;
  explicit constexpr RequestViewportUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestViewportUpdate(const RequestViewportUpdate& from);
  RequestViewportUpdate(RequestViewportUpdate&& from) noexcept
    : RequestViewportUpdate() {
    *this = ::std::move(from);
  }

  inline RequestViewportUpdate& operator=(const RequestViewportUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestViewportUpdate& operator=(RequestViewportUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestViewportUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestViewportUpdate* internal_default_instance() {
    return reinterpret_cast<const RequestViewportUpdate*>(
               &_RequestViewportUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(RequestViewportUpdate& a, RequestViewportUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestViewportUpdate* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestViewportUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestViewportUpdate* New() const final {
    return new RequestViewportUpdate();
  }

  RequestViewportUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestViewportUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestViewportUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestViewportUpdate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestViewportUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.RequestViewportUpdate";
  }
  protected:
  explicit RequestViewportUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // uint32 playerId = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::uint32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.RequestViewportUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 playerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ObjectInfo

// uint32 ObjectType = 1;
inline void ObjectInfo::clear_objecttype() {
  objecttype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjectInfo::_internal_objecttype() const {
  return objecttype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjectInfo::objecttype() const {
  // @@protoc_insertion_point(field_get:protocol.ObjectInfo.ObjectType)
  return _internal_objecttype();
}
inline void ObjectInfo::_internal_set_objecttype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  objecttype_ = value;
}
inline void ObjectInfo::set_objecttype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_objecttype(value);
  // @@protoc_insertion_point(field_set:protocol.ObjectInfo.ObjectType)
}

// uint32 actorId = 2;
inline void ObjectInfo::clear_actorid() {
  actorid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjectInfo::_internal_actorid() const {
  return actorid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjectInfo::actorid() const {
  // @@protoc_insertion_point(field_get:protocol.ObjectInfo.actorId)
  return _internal_actorid();
}
inline void ObjectInfo::_internal_set_actorid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  actorid_ = value;
}
inline void ObjectInfo::set_actorid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_actorid(value);
  // @@protoc_insertion_point(field_set:protocol.ObjectInfo.actorId)
}

// string name = 3;
inline void ObjectInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ObjectInfo::name() const {
  // @@protoc_insertion_point(field_get:protocol.ObjectInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.ObjectInfo.name)
}
inline std::string* ObjectInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:protocol.ObjectInfo.name)
  return _s;
}
inline const std::string& ObjectInfo::_internal_name() const {
  return name_.Get();
}
inline void ObjectInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ObjectInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ObjectInfo::release_name() {
  // @@protoc_insertion_point(field_release:protocol.ObjectInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ObjectInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protocol.ObjectInfo.name)
}

// .protocol.PositionInfo posInfo = 4;
inline bool ObjectInfo::_internal_has_posinfo() const {
  return this != internal_default_instance() && posinfo_ != nullptr;
}
inline bool ObjectInfo::has_posinfo() const {
  return _internal_has_posinfo();
}
inline void ObjectInfo::clear_posinfo() {
  if (GetArenaForAllocation() == nullptr && posinfo_ != nullptr) {
    delete posinfo_;
  }
  posinfo_ = nullptr;
}
inline const ::protocol::PositionInfo& ObjectInfo::_internal_posinfo() const {
  const ::protocol::PositionInfo* p = posinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocol::PositionInfo&>(
      ::protocol::_PositionInfo_default_instance_);
}
inline const ::protocol::PositionInfo& ObjectInfo::posinfo() const {
  // @@protoc_insertion_point(field_get:protocol.ObjectInfo.posInfo)
  return _internal_posinfo();
}
inline void ObjectInfo::unsafe_arena_set_allocated_posinfo(
    ::protocol::PositionInfo* posinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(posinfo_);
  }
  posinfo_ = posinfo;
  if (posinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.ObjectInfo.posInfo)
}
inline ::protocol::PositionInfo* ObjectInfo::release_posinfo() {
  
  ::protocol::PositionInfo* temp = posinfo_;
  posinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protocol::PositionInfo* ObjectInfo::unsafe_arena_release_posinfo() {
  // @@protoc_insertion_point(field_release:protocol.ObjectInfo.posInfo)
  
  ::protocol::PositionInfo* temp = posinfo_;
  posinfo_ = nullptr;
  return temp;
}
inline ::protocol::PositionInfo* ObjectInfo::_internal_mutable_posinfo() {
  
  if (posinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::PositionInfo>(GetArenaForAllocation());
    posinfo_ = p;
  }
  return posinfo_;
}
inline ::protocol::PositionInfo* ObjectInfo::mutable_posinfo() {
  ::protocol::PositionInfo* _msg = _internal_mutable_posinfo();
  // @@protoc_insertion_point(field_mutable:protocol.ObjectInfo.posInfo)
  return _msg;
}
inline void ObjectInfo::set_allocated_posinfo(::protocol::PositionInfo* posinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete posinfo_;
  }
  if (posinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protocol::PositionInfo>::GetOwningArena(posinfo);
    if (message_arena != submessage_arena) {
      posinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, posinfo, submessage_arena);
    }
    
  } else {
    
  }
  posinfo_ = posinfo;
  // @@protoc_insertion_point(field_set_allocated:protocol.ObjectInfo.posInfo)
}

// .protocol.StatInfo statInfo = 5;
inline bool ObjectInfo::_internal_has_statinfo() const {
  return this != internal_default_instance() && statinfo_ != nullptr;
}
inline bool ObjectInfo::has_statinfo() const {
  return _internal_has_statinfo();
}
inline void ObjectInfo::clear_statinfo() {
  if (GetArenaForAllocation() == nullptr && statinfo_ != nullptr) {
    delete statinfo_;
  }
  statinfo_ = nullptr;
}
inline const ::protocol::StatInfo& ObjectInfo::_internal_statinfo() const {
  const ::protocol::StatInfo* p = statinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocol::StatInfo&>(
      ::protocol::_StatInfo_default_instance_);
}
inline const ::protocol::StatInfo& ObjectInfo::statinfo() const {
  // @@protoc_insertion_point(field_get:protocol.ObjectInfo.statInfo)
  return _internal_statinfo();
}
inline void ObjectInfo::unsafe_arena_set_allocated_statinfo(
    ::protocol::StatInfo* statinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(statinfo_);
  }
  statinfo_ = statinfo;
  if (statinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.ObjectInfo.statInfo)
}
inline ::protocol::StatInfo* ObjectInfo::release_statinfo() {
  
  ::protocol::StatInfo* temp = statinfo_;
  statinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protocol::StatInfo* ObjectInfo::unsafe_arena_release_statinfo() {
  // @@protoc_insertion_point(field_release:protocol.ObjectInfo.statInfo)
  
  ::protocol::StatInfo* temp = statinfo_;
  statinfo_ = nullptr;
  return temp;
}
inline ::protocol::StatInfo* ObjectInfo::_internal_mutable_statinfo() {
  
  if (statinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::StatInfo>(GetArenaForAllocation());
    statinfo_ = p;
  }
  return statinfo_;
}
inline ::protocol::StatInfo* ObjectInfo::mutable_statinfo() {
  ::protocol::StatInfo* _msg = _internal_mutable_statinfo();
  // @@protoc_insertion_point(field_mutable:protocol.ObjectInfo.statInfo)
  return _msg;
}
inline void ObjectInfo::set_allocated_statinfo(::protocol::StatInfo* statinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete statinfo_;
  }
  if (statinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protocol::StatInfo>::GetOwningArena(statinfo);
    if (message_arena != submessage_arena) {
      statinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, statinfo, submessage_arena);
    }
    
  } else {
    
  }
  statinfo_ = statinfo;
  // @@protoc_insertion_point(field_set_allocated:protocol.ObjectInfo.statInfo)
}

// -------------------------------------------------------------------

// PositionInfo

// uint32 state = 1;
inline void PositionInfo::clear_state() {
  state_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PositionInfo::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PositionInfo::state() const {
  // @@protoc_insertion_point(field_get:protocol.PositionInfo.state)
  return _internal_state();
}
inline void PositionInfo::_internal_set_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  state_ = value;
}
inline void PositionInfo::set_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:protocol.PositionInfo.state)
}

// uint32 moveDir = 2;
inline void PositionInfo::clear_movedir() {
  movedir_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PositionInfo::_internal_movedir() const {
  return movedir_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PositionInfo::movedir() const {
  // @@protoc_insertion_point(field_get:protocol.PositionInfo.moveDir)
  return _internal_movedir();
}
inline void PositionInfo::_internal_set_movedir(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  movedir_ = value;
}
inline void PositionInfo::set_movedir(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_movedir(value);
  // @@protoc_insertion_point(field_set:protocol.PositionInfo.moveDir)
}

// int32 posX = 3;
inline void PositionInfo::clear_posx() {
  posx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionInfo::_internal_posx() const {
  return posx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionInfo::posx() const {
  // @@protoc_insertion_point(field_get:protocol.PositionInfo.posX)
  return _internal_posx();
}
inline void PositionInfo::_internal_set_posx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  posx_ = value;
}
inline void PositionInfo::set_posx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_posx(value);
  // @@protoc_insertion_point(field_set:protocol.PositionInfo.posX)
}

// int32 posY = 4;
inline void PositionInfo::clear_posy() {
  posy_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionInfo::_internal_posy() const {
  return posy_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionInfo::posy() const {
  // @@protoc_insertion_point(field_get:protocol.PositionInfo.posY)
  return _internal_posy();
}
inline void PositionInfo::_internal_set_posy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  posy_ = value;
}
inline void PositionInfo::set_posy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_posy(value);
  // @@protoc_insertion_point(field_set:protocol.PositionInfo.posY)
}

// -------------------------------------------------------------------

// StatInfo

// uint32 level = 1;
inline void StatInfo::clear_level() {
  level_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StatInfo::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StatInfo::level() const {
  // @@protoc_insertion_point(field_get:protocol.StatInfo.level)
  return _internal_level();
}
inline void StatInfo::_internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  level_ = value;
}
inline void StatInfo::set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:protocol.StatInfo.level)
}

// uint32 hp = 2;
inline void StatInfo::clear_hp() {
  hp_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StatInfo::_internal_hp() const {
  return hp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StatInfo::hp() const {
  // @@protoc_insertion_point(field_get:protocol.StatInfo.hp)
  return _internal_hp();
}
inline void StatInfo::_internal_set_hp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  hp_ = value;
}
inline void StatInfo::set_hp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:protocol.StatInfo.hp)
}

// uint32 maxHp = 3;
inline void StatInfo::clear_maxhp() {
  maxhp_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StatInfo::_internal_maxhp() const {
  return maxhp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StatInfo::maxhp() const {
  // @@protoc_insertion_point(field_get:protocol.StatInfo.maxHp)
  return _internal_maxhp();
}
inline void StatInfo::_internal_set_maxhp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maxhp_ = value;
}
inline void StatInfo::set_maxhp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxhp(value);
  // @@protoc_insertion_point(field_set:protocol.StatInfo.maxHp)
}

// int32 attack = 4;
inline void StatInfo::clear_attack() {
  attack_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatInfo::_internal_attack() const {
  return attack_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatInfo::attack() const {
  // @@protoc_insertion_point(field_get:protocol.StatInfo.attack)
  return _internal_attack();
}
inline void StatInfo::_internal_set_attack(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  attack_ = value;
}
inline void StatInfo::set_attack(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_attack(value);
  // @@protoc_insertion_point(field_set:protocol.StatInfo.attack)
}

// float speed = 5;
inline void StatInfo::clear_speed() {
  speed_ = 0;
}
inline float StatInfo::_internal_speed() const {
  return speed_;
}
inline float StatInfo::speed() const {
  // @@protoc_insertion_point(field_get:protocol.StatInfo.speed)
  return _internal_speed();
}
inline void StatInfo::_internal_set_speed(float value) {
  
  speed_ = value;
}
inline void StatInfo::set_speed(float value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:protocol.StatInfo.speed)
}

// uint32 totalExp = 6;
inline void StatInfo::clear_totalexp() {
  totalexp_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StatInfo::_internal_totalexp() const {
  return totalexp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StatInfo::totalexp() const {
  // @@protoc_insertion_point(field_get:protocol.StatInfo.totalExp)
  return _internal_totalexp();
}
inline void StatInfo::_internal_set_totalexp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  totalexp_ = value;
}
inline void StatInfo::set_totalexp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_totalexp(value);
  // @@protoc_insertion_point(field_set:protocol.StatInfo.totalExp)
}

// -------------------------------------------------------------------

// RequestJoin

// string id = 1;
inline void RequestJoin::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& RequestJoin::id() const {
  // @@protoc_insertion_point(field_get:protocol.RequestJoin.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestJoin::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.RequestJoin.id)
}
inline std::string* RequestJoin::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:protocol.RequestJoin.id)
  return _s;
}
inline const std::string& RequestJoin::_internal_id() const {
  return id_.Get();
}
inline void RequestJoin::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RequestJoin::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RequestJoin::release_id() {
  // @@protoc_insertion_point(field_release:protocol.RequestJoin.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RequestJoin::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protocol.RequestJoin.id)
}

// string password = 2;
inline void RequestJoin::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& RequestJoin::password() const {
  // @@protoc_insertion_point(field_get:protocol.RequestJoin.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestJoin::set_password(ArgT0&& arg0, ArgT... args) {
 
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.RequestJoin.password)
}
inline std::string* RequestJoin::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:protocol.RequestJoin.password)
  return _s;
}
inline const std::string& RequestJoin::_internal_password() const {
  return password_.Get();
}
inline void RequestJoin::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RequestJoin::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RequestJoin::release_password() {
  // @@protoc_insertion_point(field_release:protocol.RequestJoin.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RequestJoin::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protocol.RequestJoin.password)
}

// -------------------------------------------------------------------

// ReturnJoin

// uint32 result = 1;
inline void ReturnJoin::clear_result() {
  result_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReturnJoin::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReturnJoin::result() const {
  // @@protoc_insertion_point(field_get:protocol.ReturnJoin.result)
  return _internal_result();
}
inline void ReturnJoin::_internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  result_ = value;
}
inline void ReturnJoin::set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:protocol.ReturnJoin.result)
}

// -------------------------------------------------------------------

// RequestLogin

// string id = 1;
inline void RequestLogin::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& RequestLogin::id() const {
  // @@protoc_insertion_point(field_get:protocol.RequestLogin.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestLogin::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.RequestLogin.id)
}
inline std::string* RequestLogin::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:protocol.RequestLogin.id)
  return _s;
}
inline const std::string& RequestLogin::_internal_id() const {
  return id_.Get();
}
inline void RequestLogin::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RequestLogin::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RequestLogin::release_id() {
  // @@protoc_insertion_point(field_release:protocol.RequestLogin.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RequestLogin::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protocol.RequestLogin.id)
}

// string password = 2;
inline void RequestLogin::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& RequestLogin::password() const {
  // @@protoc_insertion_point(field_get:protocol.RequestLogin.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestLogin::set_password(ArgT0&& arg0, ArgT... args) {
 
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.RequestLogin.password)
}
inline std::string* RequestLogin::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:protocol.RequestLogin.password)
  return _s;
}
inline const std::string& RequestLogin::_internal_password() const {
  return password_.Get();
}
inline void RequestLogin::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RequestLogin::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RequestLogin::release_password() {
  // @@protoc_insertion_point(field_release:protocol.RequestLogin.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RequestLogin::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protocol.RequestLogin.password)
}

// -------------------------------------------------------------------

// ReturnLogin

// uint32 result = 1;
inline void ReturnLogin::clear_result() {
  result_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReturnLogin::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReturnLogin::result() const {
  // @@protoc_insertion_point(field_get:protocol.ReturnLogin.result)
  return _internal_result();
}
inline void ReturnLogin::_internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  result_ = value;
}
inline void ReturnLogin::set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:protocol.ReturnLogin.result)
}

// uint32 playerId = 2;
inline void ReturnLogin::clear_playerid() {
  playerid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReturnLogin::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReturnLogin::playerid() const {
  // @@protoc_insertion_point(field_get:protocol.ReturnLogin.playerId)
  return _internal_playerid();
}
inline void ReturnLogin::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  playerid_ = value;
}
inline void ReturnLogin::set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:protocol.ReturnLogin.playerId)
}

// -------------------------------------------------------------------

// RequestEnterGame

// uint32 playerId = 1;
inline void RequestEnterGame::clear_playerid() {
  playerid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestEnterGame::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestEnterGame::playerid() const {
  // @@protoc_insertion_point(field_get:protocol.RequestEnterGame.playerId)
  return _internal_playerid();
}
inline void RequestEnterGame::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  playerid_ = value;
}
inline void RequestEnterGame::set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:protocol.RequestEnterGame.playerId)
}

// uint32 zoneId = 2;
inline void RequestEnterGame::clear_zoneid() {
  zoneid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestEnterGame::_internal_zoneid() const {
  return zoneid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestEnterGame::zoneid() const {
  // @@protoc_insertion_point(field_get:protocol.RequestEnterGame.zoneId)
  return _internal_zoneid();
}
inline void RequestEnterGame::_internal_set_zoneid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  zoneid_ = value;
}
inline void RequestEnterGame::set_zoneid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_zoneid(value);
  // @@protoc_insertion_point(field_set:protocol.RequestEnterGame.zoneId)
}

// -------------------------------------------------------------------

// ReturnEnterGame

// .protocol.ObjectInfo myPlayer = 1;
inline bool ReturnEnterGame::_internal_has_myplayer() const {
  return this != internal_default_instance() && myplayer_ != nullptr;
}
inline bool ReturnEnterGame::has_myplayer() const {
  return _internal_has_myplayer();
}
inline void ReturnEnterGame::clear_myplayer() {
  if (GetArenaForAllocation() == nullptr && myplayer_ != nullptr) {
    delete myplayer_;
  }
  myplayer_ = nullptr;
}
inline const ::protocol::ObjectInfo& ReturnEnterGame::_internal_myplayer() const {
  const ::protocol::ObjectInfo* p = myplayer_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocol::ObjectInfo&>(
      ::protocol::_ObjectInfo_default_instance_);
}
inline const ::protocol::ObjectInfo& ReturnEnterGame::myplayer() const {
  // @@protoc_insertion_point(field_get:protocol.ReturnEnterGame.myPlayer)
  return _internal_myplayer();
}
inline void ReturnEnterGame::unsafe_arena_set_allocated_myplayer(
    ::protocol::ObjectInfo* myplayer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(myplayer_);
  }
  myplayer_ = myplayer;
  if (myplayer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.ReturnEnterGame.myPlayer)
}
inline ::protocol::ObjectInfo* ReturnEnterGame::release_myplayer() {
  
  ::protocol::ObjectInfo* temp = myplayer_;
  myplayer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protocol::ObjectInfo* ReturnEnterGame::unsafe_arena_release_myplayer() {
  // @@protoc_insertion_point(field_release:protocol.ReturnEnterGame.myPlayer)
  
  ::protocol::ObjectInfo* temp = myplayer_;
  myplayer_ = nullptr;
  return temp;
}
inline ::protocol::ObjectInfo* ReturnEnterGame::_internal_mutable_myplayer() {
  
  if (myplayer_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::ObjectInfo>(GetArenaForAllocation());
    myplayer_ = p;
  }
  return myplayer_;
}
inline ::protocol::ObjectInfo* ReturnEnterGame::mutable_myplayer() {
  ::protocol::ObjectInfo* _msg = _internal_mutable_myplayer();
  // @@protoc_insertion_point(field_mutable:protocol.ReturnEnterGame.myPlayer)
  return _msg;
}
inline void ReturnEnterGame::set_allocated_myplayer(::protocol::ObjectInfo* myplayer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete myplayer_;
  }
  if (myplayer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protocol::ObjectInfo>::GetOwningArena(myplayer);
    if (message_arena != submessage_arena) {
      myplayer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, myplayer, submessage_arena);
    }
    
  } else {
    
  }
  myplayer_ = myplayer;
  // @@protoc_insertion_point(field_set_allocated:protocol.ReturnEnterGame.myPlayer)
}

// uint32 zoneId = 2;
inline void ReturnEnterGame::clear_zoneid() {
  zoneid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReturnEnterGame::_internal_zoneid() const {
  return zoneid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReturnEnterGame::zoneid() const {
  // @@protoc_insertion_point(field_get:protocol.ReturnEnterGame.zoneId)
  return _internal_zoneid();
}
inline void ReturnEnterGame::_internal_set_zoneid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  zoneid_ = value;
}
inline void ReturnEnterGame::set_zoneid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_zoneid(value);
  // @@protoc_insertion_point(field_set:protocol.ReturnEnterGame.zoneId)
}

// -------------------------------------------------------------------

// NotifySpawn

// repeated .protocol.ObjectInfo objects = 1;
inline int NotifySpawn::_internal_objects_size() const {
  return objects_.size();
}
inline int NotifySpawn::objects_size() const {
  return _internal_objects_size();
}
inline void NotifySpawn::clear_objects() {
  objects_.Clear();
}
inline ::protocol::ObjectInfo* NotifySpawn::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.NotifySpawn.objects)
  return objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::ObjectInfo >*
NotifySpawn::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:protocol.NotifySpawn.objects)
  return &objects_;
}
inline const ::protocol::ObjectInfo& NotifySpawn::_internal_objects(int index) const {
  return objects_.Get(index);
}
inline const ::protocol::ObjectInfo& NotifySpawn::objects(int index) const {
  // @@protoc_insertion_point(field_get:protocol.NotifySpawn.objects)
  return _internal_objects(index);
}
inline ::protocol::ObjectInfo* NotifySpawn::_internal_add_objects() {
  return objects_.Add();
}
inline ::protocol::ObjectInfo* NotifySpawn::add_objects() {
  ::protocol::ObjectInfo* _add = _internal_add_objects();
  // @@protoc_insertion_point(field_add:protocol.NotifySpawn.objects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::ObjectInfo >&
NotifySpawn::objects() const {
  // @@protoc_insertion_point(field_list:protocol.NotifySpawn.objects)
  return objects_;
}

// -------------------------------------------------------------------

// RequestMove

// .protocol.PositionInfo posInfo = 1;
inline bool RequestMove::_internal_has_posinfo() const {
  return this != internal_default_instance() && posinfo_ != nullptr;
}
inline bool RequestMove::has_posinfo() const {
  return _internal_has_posinfo();
}
inline void RequestMove::clear_posinfo() {
  if (GetArenaForAllocation() == nullptr && posinfo_ != nullptr) {
    delete posinfo_;
  }
  posinfo_ = nullptr;
}
inline const ::protocol::PositionInfo& RequestMove::_internal_posinfo() const {
  const ::protocol::PositionInfo* p = posinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocol::PositionInfo&>(
      ::protocol::_PositionInfo_default_instance_);
}
inline const ::protocol::PositionInfo& RequestMove::posinfo() const {
  // @@protoc_insertion_point(field_get:protocol.RequestMove.posInfo)
  return _internal_posinfo();
}
inline void RequestMove::unsafe_arena_set_allocated_posinfo(
    ::protocol::PositionInfo* posinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(posinfo_);
  }
  posinfo_ = posinfo;
  if (posinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.RequestMove.posInfo)
}
inline ::protocol::PositionInfo* RequestMove::release_posinfo() {
  
  ::protocol::PositionInfo* temp = posinfo_;
  posinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protocol::PositionInfo* RequestMove::unsafe_arena_release_posinfo() {
  // @@protoc_insertion_point(field_release:protocol.RequestMove.posInfo)
  
  ::protocol::PositionInfo* temp = posinfo_;
  posinfo_ = nullptr;
  return temp;
}
inline ::protocol::PositionInfo* RequestMove::_internal_mutable_posinfo() {
  
  if (posinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::PositionInfo>(GetArenaForAllocation());
    posinfo_ = p;
  }
  return posinfo_;
}
inline ::protocol::PositionInfo* RequestMove::mutable_posinfo() {
  ::protocol::PositionInfo* _msg = _internal_mutable_posinfo();
  // @@protoc_insertion_point(field_mutable:protocol.RequestMove.posInfo)
  return _msg;
}
inline void RequestMove::set_allocated_posinfo(::protocol::PositionInfo* posinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete posinfo_;
  }
  if (posinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protocol::PositionInfo>::GetOwningArena(posinfo);
    if (message_arena != submessage_arena) {
      posinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, posinfo, submessage_arena);
    }
    
  } else {
    
  }
  posinfo_ = posinfo;
  // @@protoc_insertion_point(field_set_allocated:protocol.RequestMove.posInfo)
}

// -------------------------------------------------------------------

// ReturnMove

// uint32 actorId = 1;
inline void ReturnMove::clear_actorid() {
  actorid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReturnMove::_internal_actorid() const {
  return actorid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReturnMove::actorid() const {
  // @@protoc_insertion_point(field_get:protocol.ReturnMove.actorId)
  return _internal_actorid();
}
inline void ReturnMove::_internal_set_actorid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  actorid_ = value;
}
inline void ReturnMove::set_actorid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_actorid(value);
  // @@protoc_insertion_point(field_set:protocol.ReturnMove.actorId)
}

// .protocol.PositionInfo posInfo = 2;
inline bool ReturnMove::_internal_has_posinfo() const {
  return this != internal_default_instance() && posinfo_ != nullptr;
}
inline bool ReturnMove::has_posinfo() const {
  return _internal_has_posinfo();
}
inline void ReturnMove::clear_posinfo() {
  if (GetArenaForAllocation() == nullptr && posinfo_ != nullptr) {
    delete posinfo_;
  }
  posinfo_ = nullptr;
}
inline const ::protocol::PositionInfo& ReturnMove::_internal_posinfo() const {
  const ::protocol::PositionInfo* p = posinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocol::PositionInfo&>(
      ::protocol::_PositionInfo_default_instance_);
}
inline const ::protocol::PositionInfo& ReturnMove::posinfo() const {
  // @@protoc_insertion_point(field_get:protocol.ReturnMove.posInfo)
  return _internal_posinfo();
}
inline void ReturnMove::unsafe_arena_set_allocated_posinfo(
    ::protocol::PositionInfo* posinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(posinfo_);
  }
  posinfo_ = posinfo;
  if (posinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.ReturnMove.posInfo)
}
inline ::protocol::PositionInfo* ReturnMove::release_posinfo() {
  
  ::protocol::PositionInfo* temp = posinfo_;
  posinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protocol::PositionInfo* ReturnMove::unsafe_arena_release_posinfo() {
  // @@protoc_insertion_point(field_release:protocol.ReturnMove.posInfo)
  
  ::protocol::PositionInfo* temp = posinfo_;
  posinfo_ = nullptr;
  return temp;
}
inline ::protocol::PositionInfo* ReturnMove::_internal_mutable_posinfo() {
  
  if (posinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::PositionInfo>(GetArenaForAllocation());
    posinfo_ = p;
  }
  return posinfo_;
}
inline ::protocol::PositionInfo* ReturnMove::mutable_posinfo() {
  ::protocol::PositionInfo* _msg = _internal_mutable_posinfo();
  // @@protoc_insertion_point(field_mutable:protocol.ReturnMove.posInfo)
  return _msg;
}
inline void ReturnMove::set_allocated_posinfo(::protocol::PositionInfo* posinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete posinfo_;
  }
  if (posinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protocol::PositionInfo>::GetOwningArena(posinfo);
    if (message_arena != submessage_arena) {
      posinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, posinfo, submessage_arena);
    }
    
  } else {
    
  }
  posinfo_ = posinfo;
  // @@protoc_insertion_point(field_set_allocated:protocol.ReturnMove.posInfo)
}

// -------------------------------------------------------------------

// NotifySetHp

// uint32 actorId = 1;
inline void NotifySetHp::clear_actorid() {
  actorid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NotifySetHp::_internal_actorid() const {
  return actorid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NotifySetHp::actorid() const {
  // @@protoc_insertion_point(field_get:protocol.NotifySetHp.actorId)
  return _internal_actorid();
}
inline void NotifySetHp::_internal_set_actorid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  actorid_ = value;
}
inline void NotifySetHp::set_actorid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_actorid(value);
  // @@protoc_insertion_point(field_set:protocol.NotifySetHp.actorId)
}

// uint32 hp = 2;
inline void NotifySetHp::clear_hp() {
  hp_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NotifySetHp::_internal_hp() const {
  return hp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NotifySetHp::hp() const {
  // @@protoc_insertion_point(field_get:protocol.NotifySetHp.hp)
  return _internal_hp();
}
inline void NotifySetHp::_internal_set_hp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  hp_ = value;
}
inline void NotifySetHp::set_hp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:protocol.NotifySetHp.hp)
}

// -------------------------------------------------------------------

// RequestSkill

// uint32 skillId = 1;
inline void RequestSkill::clear_skillid() {
  skillid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestSkill::_internal_skillid() const {
  return skillid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestSkill::skillid() const {
  // @@protoc_insertion_point(field_get:protocol.RequestSkill.skillId)
  return _internal_skillid();
}
inline void RequestSkill::_internal_set_skillid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  skillid_ = value;
}
inline void RequestSkill::set_skillid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_skillid(value);
  // @@protoc_insertion_point(field_set:protocol.RequestSkill.skillId)
}

// uint32 targetActorId = 2;
inline void RequestSkill::clear_targetactorid() {
  targetactorid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestSkill::_internal_targetactorid() const {
  return targetactorid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestSkill::targetactorid() const {
  // @@protoc_insertion_point(field_get:protocol.RequestSkill.targetActorId)
  return _internal_targetactorid();
}
inline void RequestSkill::_internal_set_targetactorid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  targetactorid_ = value;
}
inline void RequestSkill::set_targetactorid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_targetactorid(value);
  // @@protoc_insertion_point(field_set:protocol.RequestSkill.targetActorId)
}

// -------------------------------------------------------------------

// ReturnSkill

// uint32 actorId = 1;
inline void ReturnSkill::clear_actorid() {
  actorid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReturnSkill::_internal_actorid() const {
  return actorid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReturnSkill::actorid() const {
  // @@protoc_insertion_point(field_get:protocol.ReturnSkill.actorId)
  return _internal_actorid();
}
inline void ReturnSkill::_internal_set_actorid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  actorid_ = value;
}
inline void ReturnSkill::set_actorid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_actorid(value);
  // @@protoc_insertion_point(field_set:protocol.ReturnSkill.actorId)
}

// uint32 skillId = 2;
inline void ReturnSkill::clear_skillid() {
  skillid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReturnSkill::_internal_skillid() const {
  return skillid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReturnSkill::skillid() const {
  // @@protoc_insertion_point(field_get:protocol.ReturnSkill.skillId)
  return _internal_skillid();
}
inline void ReturnSkill::_internal_set_skillid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  skillid_ = value;
}
inline void ReturnSkill::set_skillid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_skillid(value);
  // @@protoc_insertion_point(field_set:protocol.ReturnSkill.skillId)
}

// -------------------------------------------------------------------

// NotifyDie

// uint32 actorId = 1;
inline void NotifyDie::clear_actorid() {
  actorid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NotifyDie::_internal_actorid() const {
  return actorid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NotifyDie::actorid() const {
  // @@protoc_insertion_point(field_get:protocol.NotifyDie.actorId)
  return _internal_actorid();
}
inline void NotifyDie::_internal_set_actorid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  actorid_ = value;
}
inline void NotifyDie::set_actorid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_actorid(value);
  // @@protoc_insertion_point(field_set:protocol.NotifyDie.actorId)
}

// uint32 attackerId = 2;
inline void NotifyDie::clear_attackerid() {
  attackerid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NotifyDie::_internal_attackerid() const {
  return attackerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NotifyDie::attackerid() const {
  // @@protoc_insertion_point(field_get:protocol.NotifyDie.attackerId)
  return _internal_attackerid();
}
inline void NotifyDie::_internal_set_attackerid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  attackerid_ = value;
}
inline void NotifyDie::set_attackerid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_attackerid(value);
  // @@protoc_insertion_point(field_set:protocol.NotifyDie.attackerId)
}

// -------------------------------------------------------------------

// NotifyDespawn

// repeated uint32 actorIds = 1;
inline int NotifyDespawn::_internal_actorids_size() const {
  return actorids_.size();
}
inline int NotifyDespawn::actorids_size() const {
  return _internal_actorids_size();
}
inline void NotifyDespawn::clear_actorids() {
  actorids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NotifyDespawn::_internal_actorids(int index) const {
  return actorids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NotifyDespawn::actorids(int index) const {
  // @@protoc_insertion_point(field_get:protocol.NotifyDespawn.actorIds)
  return _internal_actorids(index);
}
inline void NotifyDespawn::set_actorids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  actorids_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.NotifyDespawn.actorIds)
}
inline void NotifyDespawn::_internal_add_actorids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  actorids_.Add(value);
}
inline void NotifyDespawn::add_actorids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_actorids(value);
  // @@protoc_insertion_point(field_add:protocol.NotifyDespawn.actorIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
NotifyDespawn::_internal_actorids() const {
  return actorids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
NotifyDespawn::actorids() const {
  // @@protoc_insertion_point(field_list:protocol.NotifyDespawn.actorIds)
  return _internal_actorids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
NotifyDespawn::_internal_mutable_actorids() {
  return &actorids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
NotifyDespawn::mutable_actorids() {
  // @@protoc_insertion_point(field_mutable_list:protocol.NotifyDespawn.actorIds)
  return _internal_mutable_actorids();
}

// -------------------------------------------------------------------

// RequestTeleport

// uint32 actorId = 1;
inline void RequestTeleport::clear_actorid() {
  actorid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestTeleport::_internal_actorid() const {
  return actorid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestTeleport::actorid() const {
  // @@protoc_insertion_point(field_get:protocol.RequestTeleport.actorId)
  return _internal_actorid();
}
inline void RequestTeleport::_internal_set_actorid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  actorid_ = value;
}
inline void RequestTeleport::set_actorid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_actorid(value);
  // @@protoc_insertion_point(field_set:protocol.RequestTeleport.actorId)
}

// uint32 zoneId = 2;
inline void RequestTeleport::clear_zoneid() {
  zoneid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestTeleport::_internal_zoneid() const {
  return zoneid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestTeleport::zoneid() const {
  // @@protoc_insertion_point(field_get:protocol.RequestTeleport.zoneId)
  return _internal_zoneid();
}
inline void RequestTeleport::_internal_set_zoneid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  zoneid_ = value;
}
inline void RequestTeleport::set_zoneid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_zoneid(value);
  // @@protoc_insertion_point(field_set:protocol.RequestTeleport.zoneId)
}

// .protocol.PositionInfo posInfo = 3;
inline bool RequestTeleport::_internal_has_posinfo() const {
  return this != internal_default_instance() && posinfo_ != nullptr;
}
inline bool RequestTeleport::has_posinfo() const {
  return _internal_has_posinfo();
}
inline void RequestTeleport::clear_posinfo() {
  if (GetArenaForAllocation() == nullptr && posinfo_ != nullptr) {
    delete posinfo_;
  }
  posinfo_ = nullptr;
}
inline const ::protocol::PositionInfo& RequestTeleport::_internal_posinfo() const {
  const ::protocol::PositionInfo* p = posinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocol::PositionInfo&>(
      ::protocol::_PositionInfo_default_instance_);
}
inline const ::protocol::PositionInfo& RequestTeleport::posinfo() const {
  // @@protoc_insertion_point(field_get:protocol.RequestTeleport.posInfo)
  return _internal_posinfo();
}
inline void RequestTeleport::unsafe_arena_set_allocated_posinfo(
    ::protocol::PositionInfo* posinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(posinfo_);
  }
  posinfo_ = posinfo;
  if (posinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.RequestTeleport.posInfo)
}
inline ::protocol::PositionInfo* RequestTeleport::release_posinfo() {
  
  ::protocol::PositionInfo* temp = posinfo_;
  posinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protocol::PositionInfo* RequestTeleport::unsafe_arena_release_posinfo() {
  // @@protoc_insertion_point(field_release:protocol.RequestTeleport.posInfo)
  
  ::protocol::PositionInfo* temp = posinfo_;
  posinfo_ = nullptr;
  return temp;
}
inline ::protocol::PositionInfo* RequestTeleport::_internal_mutable_posinfo() {
  
  if (posinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::PositionInfo>(GetArenaForAllocation());
    posinfo_ = p;
  }
  return posinfo_;
}
inline ::protocol::PositionInfo* RequestTeleport::mutable_posinfo() {
  ::protocol::PositionInfo* _msg = _internal_mutable_posinfo();
  // @@protoc_insertion_point(field_mutable:protocol.RequestTeleport.posInfo)
  return _msg;
}
inline void RequestTeleport::set_allocated_posinfo(::protocol::PositionInfo* posinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete posinfo_;
  }
  if (posinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protocol::PositionInfo>::GetOwningArena(posinfo);
    if (message_arena != submessage_arena) {
      posinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, posinfo, submessage_arena);
    }
    
  } else {
    
  }
  posinfo_ = posinfo;
  // @@protoc_insertion_point(field_set_allocated:protocol.RequestTeleport.posInfo)
}

// -------------------------------------------------------------------

// ReturnTeleport

// uint32 actorId = 1;
inline void ReturnTeleport::clear_actorid() {
  actorid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReturnTeleport::_internal_actorid() const {
  return actorid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReturnTeleport::actorid() const {
  // @@protoc_insertion_point(field_get:protocol.ReturnTeleport.actorId)
  return _internal_actorid();
}
inline void ReturnTeleport::_internal_set_actorid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  actorid_ = value;
}
inline void ReturnTeleport::set_actorid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_actorid(value);
  // @@protoc_insertion_point(field_set:protocol.ReturnTeleport.actorId)
}

// uint32 zoneId = 2;
inline void ReturnTeleport::clear_zoneid() {
  zoneid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReturnTeleport::_internal_zoneid() const {
  return zoneid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReturnTeleport::zoneid() const {
  // @@protoc_insertion_point(field_get:protocol.ReturnTeleport.zoneId)
  return _internal_zoneid();
}
inline void ReturnTeleport::_internal_set_zoneid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  zoneid_ = value;
}
inline void ReturnTeleport::set_zoneid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_zoneid(value);
  // @@protoc_insertion_point(field_set:protocol.ReturnTeleport.zoneId)
}

// -------------------------------------------------------------------

// RequestViewportUpdate

// uint32 playerId = 1;
inline void RequestViewportUpdate::clear_playerid() {
  playerid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestViewportUpdate::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestViewportUpdate::playerid() const {
  // @@protoc_insertion_point(field_get:protocol.RequestViewportUpdate.playerId)
  return _internal_playerid();
}
inline void RequestViewportUpdate::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  playerid_ = value;
}
inline void RequestViewportUpdate::set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:protocol.RequestViewportUpdate.playerId)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto
